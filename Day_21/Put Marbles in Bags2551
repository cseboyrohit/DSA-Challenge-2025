import java.util.*;

public class PutMarblesInBags {
    public static long putMarbles(int[] weights, int k) {
        int n = weights.length;
        if (k == 1) return 0; // If k=1, entire array is one bag, so min & max are same.

        // Step 1: Compute all partition costs (adjacent pair sums)
        List<Integer> partitionCosts = new ArrayList<>();
        for (int i = 0; i < n - 1; i++) {
            partitionCosts.add(weights[i] + weights[i + 1]);
        }

        // Step 2: Sort the partition costs
        Collections.sort(partitionCosts);

        // Step 3: Calculate max and min sums
        long minSum = 0, maxSum = 0;
        for (int i = 0; i < k - 1; i++) {
            minSum += partitionCosts.get(i);                  // Smallest (k-1) elements
            maxSum += partitionCosts.get(n - 2 - i);          // Largest (k-1) elements
        }

        return maxSum - minSum; // Difference between max and min scores
    }

    public static void main(String[] args) {
        int[] weights1 = {1, 3, 5, 1};
        int k1 = 2;
        System.out.println(putMarbles(weights1, k1)); // Output: 4

        int[] weights2 = {1, 3};
        int k2 = 2;
        System.out.println(putMarbles(weights2, k2)); // Output: 0
    }
}
